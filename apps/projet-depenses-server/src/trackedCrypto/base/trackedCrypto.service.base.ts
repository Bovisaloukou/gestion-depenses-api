/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TrackedCrypto as PrismaTrackedCrypto,
  User as PrismaUser,
} from "@prisma/client";

export class TrackedCryptoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TrackedCryptoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.trackedCrypto.count(args);
  }

  async trackedCryptos(
    args: Prisma.TrackedCryptoFindManyArgs
  ): Promise<PrismaTrackedCrypto[]> {
    return this.prisma.trackedCrypto.findMany(args);
  }
  async trackedCrypto(
    args: Prisma.TrackedCryptoFindUniqueArgs
  ): Promise<PrismaTrackedCrypto | null> {
    return this.prisma.trackedCrypto.findUnique(args);
  }
  async createTrackedCrypto(
    args: Prisma.TrackedCryptoCreateArgs
  ): Promise<PrismaTrackedCrypto> {
    return this.prisma.trackedCrypto.create(args);
  }
  async updateTrackedCrypto(
    args: Prisma.TrackedCryptoUpdateArgs
  ): Promise<PrismaTrackedCrypto> {
    return this.prisma.trackedCrypto.update(args);
  }
  async deleteTrackedCrypto(
    args: Prisma.TrackedCryptoDeleteArgs
  ): Promise<PrismaTrackedCrypto> {
    return this.prisma.trackedCrypto.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.trackedCrypto
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
